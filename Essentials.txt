version
---------------
$ ng --version

update
-------------
$ npm uninstall -g @angular/cli cache clean
$ npm install -g @angular/cli@latest

help
---------
$ ng help
$ ng help generate

new
-------------
$ ng new my-app

Serving
----------
$ ng s
$ ng s -o
$ ng s --port 5555		: WITH PORT


$ ng new my-app --prefix yo --style scss --skip-tests --verbose
--dry-run: See which files would be created, but don’t actually do anything.
--verbose: Be more chatty.
--skip-install: Don’t npm install, useful when offline or with slow internet.
--skip-tests: Don’t create spec files.
--skip-git: Don’t initialize a git repo.
--source-dir: Name of the source directory
--routing: Add routing to the app.
--prefix: Specify the prefix to use for components selectors.
--style: Defaults to css, but can be set to scss.
--inline-style: Use inline styles for components instead of separate files.
--inline-template: Use inline templates for components instead of separate files.


$ ng test			: TEST 
----------------------------------------
And some flags you can use with the test command:

--watch: Retest when some files change.
--code-coverage: Add a coverage report.
--progress: Show the progress while running the tests.
--browsers: Specify with browsers to use.
--colors: Use colors in the output or not.

Ejecting Your Webpack Config
-------------------
The Angular CLI doesn’t do it for your project anymore? Just eject, and you’ll have the full Webpack config available to tweak to your heart’s desire

$ ng eject	:



Generate a component:
------------------
$ ng g c unicorn-component

Generate a Service
--------------------
$ ng g s everything-service

Generate a Pipe
------------------
$ ng g pipe my-pipe

Generate a directive
-----------------------
$ ng g directive my-directive

Generate an enum:
----------------------
$ ng g enum some-enum

Generate a module:
--------------------
$ ng g module fancy-module

Generate a class:
-------------------
$ ng g cl my-class



Generate an interface:
------------------------
$ ng g interface my-interface


enerate a route guard
-----------------------
$ ng g guard my-guard




The Ahead-of-Time (AOT) Compiler
==============================================
The Angular Ahead-of-Time (AOT) compiler converts your Angular HTML and TypeScript code into efficient JavaScript code during the build phase before the browser downloads and runs that code.



Angular compilation
====================================
An Angular application consists largely of components and their HTML templates. Before the browser can render the application, the components and templates must be converted to executable JavaScript by an Angular compiler.

Angular offers two ways to compile your application:

Just-in-Time (JIT), which compiles your app in the browser at runtime
Ahead-of-Time (AOT), which compiles your app at build time.
JIT compilation is the default when you run the build-only or the build-and-serve-locally CLI commands:

content_copy
ng build
ng serve
For AOT compilation, append the --aot flags to the build-only or the build-and-serve-locally CLI commands:

content_copy
ng build --aot
ng serve --aot


$watch

-AngularJS (commonly referred to as "Angular.js" or "AngularJS")
-AngularJS directives allow the developer to specify custom and reusable HTML-like elements and attributes that define data bindings and the behavior of presentation components. Some of the most commonly used directives are:

ng-animate
A module provides support for JavaScript, CSS3 transition and CSS3 keyframe animation hooks within existing core and custom directives.
Since ng-* attributes are not valid in HTML specifications, data-ng-* can also be used as a prefix. For example, both ng-app and data-ng-app are valid in AngularJS.

ng-app
Declares the root element of an AngularJS application, under which directives can be used to declare bindings and define behavior.
ng-aria
A module for accessibility support of common ARIA attributes.
ng-bind
Sets the text of a DOM element to the value of an expression. For example, <span ng-bind="name"></span> displays the value of ‘name’ inside the span element. Any change to the variable ‘name’ in the application's scope reflect instantly in the DOM.
ng-class
Conditionally apply a class, depending on the value of a boolean expression.
ng-controller
Specifies a JavaScript controller class that evaluates HTML expressions.
ng-if
Basic if statement directive that instantiates the following element if the conditions are true. When the condition is false, the element is removed from the DOM. When true, a clone of the compiled element is re-inserted.
ng-init
Called once when the element is initialized.
ng-model
Similar to ng-bind, but establishes a two-way data binding between the view and the scope.
ng-model-options
Provides tuning for how model updates are done.
ng-repeat
Instantiate an element once per item from a collection.
ng-show & ng-hide
Conditionally show or hide an element, depending on the value of a boolean expression. Show and hide is achieved by setting the CSS display style.
ng-switch
Conditionally instantiate one template from a set of choices, depending on the value of a selection expression.
ng-view
The base directive responsible for handling routes[12] that resolve JSON before rendering templates driven by specified controllers.

